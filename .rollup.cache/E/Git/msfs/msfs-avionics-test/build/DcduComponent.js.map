{"version":3,"file":"DcduComponent.js","sourceRoot":"","sources":["../DcduComponent.tsx"],"names":[],"mappings":"AAAA,OAAO,EAAE,WAAW,EAAE,gBAAgB,EAAS,MAAM,SAAS,CAAC;AAC/D,OAAO,uBAAuB,CAAC;AAG/B,MAAM,OAAO,aAAc,SAAQ,gBAAqB;IAC/C,MAAM;QACX,OAAO,CACH;YACI,oCAAK,KAAK,EAAC,YAAY;gBACnB;oBACI,qCAAM,CAAC,EAAC,gBAAgB,GAAG;oBAC3B,qCAAM,CAAC,EAAC,iBAAiB,GAAG;oBAC5B,qCAAM,CAAC,EAAC,iBAAiB,GAAG,CAC5B,CACF;YAEN,oCAAK,KAAK,EAAC,cAAc;gBACrB,qCAAM,CAAC,EAAC,KAAK,EAAC,CAAC,EAAC,KAAK,YAAa,CAChC,CACP,CACN,CAAC;IACJ,CAAC;CAEF;AAED;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAuGG","sourcesContent":["import { FSComponent, DisplayComponent, VNode } from 'msfssdk';\r\nimport './DcduInstrument.scss';\r\n\r\n\r\nexport class DcduComponent extends DisplayComponent<any> {\r\n  public render(): VNode {\r\n    return (\r\n        <>\r\n            <svg class=\"dcdu-lines\">\r\n                <g>\r\n                    <path d=\"m 21 236 h 450\" />\r\n                    <path d=\"m 130 246 v 124\" />\r\n                    <path d=\"m 362 246 v 124\" />\r\n                </g>\r\n            </svg>\r\n\r\n            <svg class=\"inop-wrapper\">\r\n                <text x=\"246\" y=\"170\">INOP.</text>\r\n            </svg>\r\n        </>\r\n    );\r\n  }\r\n  \r\n}\r\n\r\n/* function SelfTest() {\r\n    return (\r\n        <svg className=\"text-wrapper\">\r\n            <text x=\"246\" y=\"170\">SELF TEST IN PROGRESS</text>\r\n            <text x=\"246\" y=\"210\">(MAX 10 SECONDS)</text>\r\n        </svg>\r\n    );\r\n}\r\nfunction powerAvailable() {\r\n    // Each DCDU is powered by a different DC BUS. Sadly the cockpit only contains a single DCDU emissive.\r\n    // Once we have two DCDUs running, the capt. DCDU should be powered by DC 1, and F/O by DC 2.\r\n    return getSimVar('L:A32NX_ELEC_DC_1_BUS_IS_POWERED', 'Bool') || getSimVar('L:A32NX_ELEC_DC_2_BUS_IS_POWERED', 'Bool');\r\n}\r\n\r\n\r\nfunction WaitingForData() {\r\n    return (\r\n        <svg className=\"text-wrapper\">\r\n            <text x=\"246\" y=\"170\">WAITING FOR DATA</text>\r\n            <text x=\"246\" y=\"210\">(MAX 30 SECONDS)</text>\r\n        </svg>\r\n    );\r\n}\r\n\r\nfunction Idle() {\r\n    const [inop, setInop] = useState(false);\r\n\r\n    useInteractionEvent('A32NX_DCDU_BTN_INOP', () => {\r\n        if (!inop) {\r\n            setInop(true);\r\n            setTimeout(() => {\r\n                setInop(false);\r\n            }, 3000);\r\n        }\r\n    });\r\n\r\n\r\n\r\n\r\n\r\n}\r\nfunction DCDU() {\r\n    const [state, setState] = useState('DEFAULT');\r\n\r\n    useUpdate((_deltaTime) => {\r\n        if (state === 'OFF') {\r\n            if (powerAvailable()) {\r\n                setState('ON');\r\n            }\r\n        } else if (!powerAvailable()) {\r\n            setState('OFF');\r\n        }\r\n    });\r\n\r\n    switch (state) {\r\n    case 'DEFAULT':\r\n        if (getSimVar('L:A32NX_COLD_AND_DARK_SPAWN')) {\r\n            setState('OFF');\r\n        } else {\r\n            setState('IDLE');\r\n        }\r\n\r\n        return <></>;\r\n    case 'OFF':\r\n        return <></>;\r\n    case 'ON':\r\n        setTimeout(() => {\r\n            if (powerAvailable()) {\r\n                setState('WAITING');\r\n            }\r\n        }, 8000);\r\n        return (\r\n            <>\r\n                <div className=\"BacklightBleed\" />\r\n                <SelfTest />\r\n            </>\r\n        );\r\n\r\n    case 'WAITING':\r\n        setTimeout(() => {\r\n            if (powerAvailable()) {\r\n                setState('IDLE');\r\n            }\r\n        }, 12000);\r\n        return (\r\n            <>\r\n                <div className=\"BacklightBleed\" />\r\n                <WaitingForData />\r\n            </>\r\n        );\r\n    case 'IDLE':\r\n        return (\r\n            <>\r\n                <div className=\"BacklightBleed\" />\r\n                <Idle />\r\n            </>\r\n        );\r\n    default:\r\n        throw new RangeError();\r\n    }\r\n}\r\n\r\nReactDOM.render(<DCDU />, renderTarget);\r\n */"]}