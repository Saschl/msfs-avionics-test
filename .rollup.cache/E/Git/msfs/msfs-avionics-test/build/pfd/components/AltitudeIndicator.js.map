{"version":3,"file":"AltitudeIndicator.js","sourceRoot":"","sources":["../../../pfd/components/AltitudeIndicator.tsx"],"names":[],"mappings":"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","sourcesContent":["import { VerticalTape } from './PFDUtils';\r\nimport { DisplayComponent, EventBus, FSComponent, Subject, Subscribable, VNode } from 'msfssdk';\r\nimport { PFDSimvars, PFDVars } from '../shared/PFDSimvarPublisher';\r\nimport { Arinc429Word } from '../shared/arinc429';\r\nimport { DigitalAltitudeReadout } from './DigitalAltitudeReadout';\r\n\r\nconst DisplayRange = 570;\r\nconst ValueSpacing = 100;\r\nconst DistanceSpacing = 7.5;\r\n\r\n\r\n\r\ninterface LandingElevationIndicatorProps {\r\n    altitude: Arinc429Word;\r\n    FWCFlightPhase: number;\r\n    bus: EventBus;\r\n}\r\n\r\n/* const LandingElevationIndicator = ({ altitude, FWCFlightPhase }: LandingElevationIndicatorProps) => {\r\n    if (FWCFlightPhase !== 7 && FWCFlightPhase !== 8) {\r\n        return null;\r\n    }\r\n\r\n    const landingElevation = getSimVar('C:fs9gps:FlightPlanDestinationAltitude', 'feet');\r\n    const delta = altitude.value - landingElevation;\r\n    if (delta > DisplayRange) {\r\n        return null;\r\n    }\r\n    const offset = (delta - DisplayRange) * DistanceSpacing / ValueSpacing;\r\n\r\n    return (\r\n        <path id=\"AltTapeLandingElevation\" class=\"EarthFill\" d={`m130.85 123.56h-13.096v${offset}h13.096z`} />\r\n    );\r\n};\r\n*/\r\nclass RadioAltIndicator extends DisplayComponent<{ bus: EventBus }>  {\r\n\r\n    private visibilitySub = Subject.create('hidden');\r\n    private offsetSub = Subject.create('hidden');\r\n\r\n\r\n    onAfterRender(node: VNode): void {\r\n        super.onAfterRender(node);\r\n\r\n        const sub = this.props.bus.getSubscriber<PFDSimvars>();\r\n\r\n        sub.on('radio_alt').whenChanged().handle(ra => {\r\n            if(ra > DisplayRange) {\r\n                this.visibilitySub.set('hidden');\r\n            } else {\r\n                this.visibilitySub.set('visible');\r\n            }\r\n            const offset = (ra - DisplayRange) * DistanceSpacing / ValueSpacing;\r\n\r\n            this.offsetSub.set(`m131.15 123.56h2.8709v${offset}h-2.8709z`);\r\n\r\n        });\r\n\r\n\r\n    }\r\n\r\n    render(): VNode {\r\n     \r\n    \r\n        return (\r\n            <path visibility={this.visibilitySub} id=\"AltTapeGroundReference\" class=\"Fill Red\" d={this.offsetSub} />\r\n        );\r\n    }\r\n};\r\n \r\n/* class GraduationElement extends DisplayComponent<{alt:number, offset:number}> {\r\n\r\n    render(): VNode {\r\n\r\n        let text = '';\r\n        let isText = true;\r\n        if (this.props.alt % 500 === 0) {\r\n            isText = true;\r\n            text = (Math.abs(this.props.alt) / 100).toString().padStart(3, '0');\r\n        }\r\n    \r\n        return (\r\n            <g transform={`translate(0 ${this.props.offset})`}>\r\n                \r\n                <path class=\"NormalStroke White\" d=\"m115.79 81.889 1.3316-1.0783-1.3316-1.0783\" />\r\n                <path class=\"NormalStroke White\" d=\"m130.85 80.819h-2.0147\" />\r\n                <text class=\"FontMedium MiddleAlign White\" x=\"122.98842\" y=\"82.939713\">{text}</text>\r\n            </g>\r\n        );\r\n    }\r\n \r\n}; */\r\n\r\ninterface AltitudeIndicatorProps {\r\n    //altitude: Arinc429Word;\r\n   // FWCFlightPhase: number;\r\n    bus: EventBus;\r\n}\r\n\r\nexport class AltitudeIndicator extends DisplayComponent<AltitudeIndicatorProps> {\r\n\r\n    private subscribable = Subject.create<number>(0);\r\n  \r\n    onAfterRender(node: VNode): void {\r\n        super.onAfterRender(node);\r\n\r\n        console.log(\"RENDER ALTITUDEINDICATOR\");\r\n        const pf = this.props.bus.getSubscriber<PFDSimvars>();\r\n\r\n        pf.on('altitude').handle(a => {\r\n            this.subscribable.set(a);\r\n        })\r\n    }\r\n\r\n    render(): VNode {\r\n/*         if (!altitude.isNormalOperation()) {\r\n            return (\r\n                <AltTapeBackground />\r\n            );\r\n        } */\r\n    \r\n\r\n        return (\r\n            <g>\r\n                <AltTapeBackground />\r\n    {/*             <LandingElevationIndicator altitude={altitude} FWCFlightPhase={FWCFlightPhase} /> */} \r\n                <VerticalTape\r\n                    bugs={[]}\r\n                    displayRange={DisplayRange + 30}\r\n                    valueSpacing={ValueSpacing}\r\n                    distanceSpacing={DistanceSpacing}\r\n                    lowerLimit={-1500}\r\n                    upperLimit={50000}\r\n                    tapeValue={this.subscribable}\r\n                    type='altitude'\r\n                />\r\n            </g>\r\n        );\r\n    \r\n    }\r\n\r\n};\r\n\r\nclass AltTapeBackground extends DisplayComponent<any> {\r\n    render(): VNode {\r\n       return (<path id=\"AltTapeBackground\" d=\"m130.85 123.56h-13.096v-85.473h13.096z\" class=\"TapeBackground\" />);\r\n    }\r\n\r\n}\r\n    \r\n\r\n\r\n interface AltitudeIndicatorOfftapeProps {\r\n\r\n    mode: '' | 'STD' | 'QFE' | 'QNH';\r\n    bus: EventBus;\r\n}\r\n\r\nexport class AltitudeIndicatorOfftape extends DisplayComponent<AltitudeIndicatorOfftapeProps>  {\r\n    render(): VNode {\r\n    \r\n    return (\r\n\r\n       /*  if (!altitude.isNormalOperation()) {\r\n            return (\r\n                <>\r\n                    <path id=\"AltTapeOutline\" class=\"NormalStroke Red\" d=\"m117.75 123.56h13.096v-85.473h-13.096\" />\r\n                    <path id=\"AltReadoutBackground\" class=\"BlackFill\" d=\"m131.35 85.308h-13.63v-8.9706h13.63z\" />\r\n                    <text id=\"AltFailText\" class=\"Blink9Seconds FontLargest Red EndAlign\" x=\"131.16769\" y=\"83.433167\">ALT</text>\r\n                </>\r\n            );\r\n        } */\r\n\r\n        <g>\r\n            <path id=\"AltTapeOutline\" class=\"NormalStroke White\" d=\"m117.75 123.56h17.83m-4.7345-85.473v85.473m-13.096-85.473h17.83\" />\r\n          {/*   <LinearDeviationIndicator altitude={altitude} linearDeviation={NaN} />\r\n            <SelectedAltIndicator currentAlt={altitude} targetAlt={targetAlt} altIsManaged={altIsManaged} mode={mode} />\r\n            <AltimeterIndicator mode={mode} altitude={altitude} />\r\n            <MetricAltIndicator altitude={altitude} MDA={MDA} targetAlt={targetAlt} altIsManaged={altIsManaged} /> */}\r\n            <path id=\"AltReadoutBackground\" class=\"BlackFill\" d=\"m130.85 85.308h-13.13v-8.9706h13.13v-2.671h8.8647v14.313h-8.8647z\" />\r\n            <RadioAltIndicator bus={this.props.bus} />\r\n            <DigitalAltitudeReadout bus={this.props.bus} />\r\n        </g>\r\n    )\r\n    \r\n    }\r\n};\r\n\r\n\r\n/*\r\ninterface SelectedAltIndicatorProps {\r\n    currentAlt: Arinc429Word,\r\n    targetAlt: number,\r\n    altIsManaged: boolean,\r\n    mode: '' | 'STD' | 'QFE' | 'QNH';\r\n}\r\n\r\nconst SelectedAltIndicator = ({ currentAlt, targetAlt, altIsManaged, mode }: SelectedAltIndicatorProps) => {\r\n    const color = altIsManaged ? 'Magenta' : 'Cyan';\r\n\r\n    const isSTD = mode === 'STD';\r\n    let boxLength = 19.14;\r\n    let text = '';\r\n    if (isSTD) {\r\n        text = Math.round(targetAlt / 100).toString().padStart(3, '0');\r\n        boxLength = 12.5;\r\n    } else {\r\n        text = Math.round(targetAlt).toString().padStart(5, ' ');\r\n    }\r\n\r\n    if (currentAlt.value - targetAlt > DisplayRange) {\r\n        return (\r\n            <g id=\"SelectedAltLowerGroup\">\r\n                <text id=\"SelectedAltLowerText\" class={`FontMedium EndAlign ${color}`} x=\"135.41222\" y=\"128.90233\" xmlSpace=\"preserve\">{text}</text>\r\n                {isSTD\r\n                && <text id=\"SelectedAltLowerFLText\" class={`FontSmall MiddleAlign ${color}`} x=\"120.83108\" y=\"128.97597\">FL</text>}\r\n            </g>\r\n        );\r\n    } if (currentAlt.value - targetAlt < -DisplayRange) {\r\n        return (\r\n            <g id=\"SelectedAltUpperGroup\">\r\n                <text id=\"SelectedAltUpperText\" class={`FontMedium EndAlign ${color}`} x=\"135.41232\" y=\"37.348804\" xmlSpace=\"preserve\">{text}</text>\r\n                {isSTD\r\n                && <text id=\"SelectedAltUpperFLText\" class={`FontSmall MiddleAlign ${color}`} x=\"120.83106\" y=\"37.337193\">FL</text>}\r\n            </g>\r\n        );\r\n    }\r\n    const offset = (currentAlt.value - targetAlt) * DistanceSpacing / ValueSpacing;\r\n\r\n    return (\r\n        <g id=\"AltTapeTargetSymbol\" transform={`translate(0 ${offset})`}>\r\n            <path class=\"BlackFill\" d={`m117.75 77.784h${boxLength}v6.0476h-${boxLength}z`} />\r\n            <path class={`NormalStroke ${color}`} d=\"m122.79 83.831v6.5516h-7.0514v-8.5675l2.0147-1.0079m4.8441-3.0238v-6.5516h-6.8588v8.5675l2.0147 1.0079\" />\r\n            <text id=\"AltTapeTargetText\" class={`FontMedium StartAlign ${color}`} x=\"118.12846\" y=\"82.867332\" xmlSpace=\"preserve\">{text}</text>\r\n        </g>\r\n    );\r\n};\r\n\r\ninterface LinearDeviationIndicatorProps {\r\n    linearDeviation: number;\r\n    altitude: Arinc429Word;\r\n}\r\n\r\nconst LinearDeviationIndicator = ({ linearDeviation, altitude }: LinearDeviationIndicatorProps) => {\r\n    if (Number.isNaN(linearDeviation)) {\r\n        return null;\r\n    }\r\n    const circleRadius = 30;\r\n    if (altitude.value - linearDeviation > DisplayRange - circleRadius) {\r\n        return (\r\n            <path id=\"VDevDotLower\" class=\"Fill Green\" d=\"m116.24 121.85c4.9e-4 0.83465 0.67686 1.511 1.511 1.511 0.83418 0 1.5105-0.67636 1.511-1.511h-1.511z\" />\r\n        );\r\n    } if (altitude.value - linearDeviation < -DisplayRange + circleRadius) {\r\n        return (\r\n            <path id=\"VDevDotUpper\" class=\"Fill Green\" d=\"m116.24 39.8c4.9e-4 -0.83466 0.67686-1.511 1.511-1.511 0.83418 0 1.5105 0.67635 1.511 1.511h-1.511z\" />\r\n        );\r\n    }\r\n    const offset = (altitude.value - linearDeviation) * DistanceSpacing / ValueSpacing;\r\n\r\n    return (\r\n        <path id=\"VDevDot\" class=\"Fill Green\" transform={`translate(0 ${offset})`} d=\"m119.26 80.796a1.511 1.5119 0 1 0-3.022 0 1.511 1.5119 0 1 0 3.022 0z\" />\r\n    );\r\n};\r\n\r\ninterface AltimeterIndicatorProps {\r\n    mode: '' | 'STD' | 'QFE' | 'QNH';\r\n    altitude: Arinc429Word,\r\n}\r\n\r\nconst AltimeterIndicator = ({ mode, altitude }: AltimeterIndicatorProps) => {\r\n    const phase = getSimVar('L:A32NX_FMGC_FLIGHT_PHASE', 'enum');\r\n    const transAlt = getSimVar(phase <= 3 ? 'L:AIRLINER_TRANS_ALT' : 'L:AIRLINER_APPR_TRANS_ALT', 'number');\r\n\r\n    if (mode === 'STD') {\r\n        return (\r\n            <g id=\"STDAltimeterModeGroup\" class={(phase > 3 && transAlt > altitude.value && transAlt !== 0) ? 'BlinkInfinite' : ''}>\r\n                <path class=\"NormalStroke Yellow\" d=\"m124.79 131.74h13.096v7.0556h-13.096z\" />\r\n                <text class=\"FontMedium Cyan AlignLeft\" x=\"125.99706\" y=\"137.20053\">STD</text>\r\n            </g>\r\n        );\r\n    }\r\n\r\n    const units = Simplane.getPressureSelectedUnits();\r\n    const pressure = Simplane.getPressureValue(units);\r\n    let text: string;\r\n    if (pressure !== null) {\r\n        if (units === 'millibar') {\r\n            text = Math.round(pressure).toString();\r\n        } else {\r\n            text = pressure.toFixed(2);\r\n        }\r\n    } else {\r\n        text = '';\r\n    }\r\n\r\n    return (\r\n        <g id=\"AltimeterGroup\" class={(phase <= 3 && transAlt < altitude.value && transAlt !== 0) ? 'BlinkInfinite' : ''}>\r\n            {mode === 'QFE'\r\n            && <path class=\"NormalStroke White\" d=\"m 116.83686,133.0668 h 13.93811 v 5.8933 h -13.93811 z\" />}\r\n            <text id=\"AltimeterModeText\" class=\"FontMedium White\" x=\"118.29047\" y=\"138.03368\">{mode}</text>\r\n            <text id=\"AltimeterSettingText\" class=\"FontMedium MiddleAlign Cyan\" x=\"140.86115\" y=\"138.03368\">{text}</text>\r\n        </g>\r\n    );\r\n};\r\n\r\ninterface MetricAltIndicatorProps {\r\n    altitude: Arinc429Word;\r\n    MDA: number;\r\n    targetAlt: number;\r\n    altIsManaged: boolean;\r\n}\r\n\r\nconst MetricAltIndicator = ({ altitude, MDA, targetAlt, altIsManaged }: MetricAltIndicatorProps) => {\r\n    const currentMetricAlt = Math.round(altitude.value * 0.3048 / 10) * 10;\r\n\r\n    const targetMetric = Math.round(targetAlt * 0.3048 / 10) * 10;\r\n    const targetAltColor = altIsManaged ? 'Magenta' : 'Cyan';\r\n\r\n    const currentMetricAltColor = altitude.value > MDA ? 'Green' : 'Amber';\r\n\r\n    const showMetricAlt = getSimVar('L:A32NX_METRIC_ALT_TOGGLE', 'bool');\r\n    if (!showMetricAlt) {\r\n        return null;\r\n    }\r\n\r\n    return (\r\n        <g id=\"MetricAltGroup\">\r\n            <path class=\"NormalStroke Yellow\" d=\"m116.56 140.22h29.213v7.0556h-29.213z\" />\r\n            <text class=\"FontMedium Cyan MiddleAlign\" x=\"141.78165\" y=\"145.69975\">M</text>\r\n            <text id=\"MetricAltText\" class={`FontMedium ${currentMetricAltColor} MiddleAlign`} x=\"128.23189\" y=\"145.80269\">{currentMetricAlt}</text>\r\n            <g id=\"MetricAltTargetGroup\">\r\n                <text id=\"MetricAltTargetText\" class={`FontSmallest ${targetAltColor} MiddleAlign`} x=\"93.670235\" y=\"37.946552\">{targetMetric}</text>\r\n                <text class=\"FontSmallest Cyan MiddleAlign\" x=\"105.15807\" y=\"37.872921\">M</text>\r\n            </g>\r\n        </g>\r\n    );\r\n};\r\n */"]}